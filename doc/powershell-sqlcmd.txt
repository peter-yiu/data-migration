# 定义 SQL 文件路径和数据库连接参数
$SqlFilePath = "C:\path\to\your\script.sql"   # SQL 文件路径
$ServerInstance = "your_sql_server.database.windows.net"  # Azure SQL Server 实例名
$DatabaseName = "your_database"               # 默认数据库
$LogFilePath = "C:\path\to\log\sqlcmd_log.txt"  # 日志文件路径

# 获取 Access Token
$accessToken = (Get-AzAccessToken -ResourceUrl https://database.windows.net/).Token

# 调用 sqlcmd，使用 Access Token
$sqlcmdCommand = "sqlcmd -S tcp:$ServerInstance -d $DatabaseName -G -I -Q `"SELECT 1`" -v AccessToken=$accessToken -o `"$LogFilePath`""

# 运行 sqlcmd
Invoke-Expression $sqlcmdCommand

# 输出完成信息
Write-Host "SQL script executed using sqlcmd with Access Token. Full log saved to: $LogFilePath"








# 定义 Azure SQL 数据库的连接参数
$ServerInstance = "your_sql_server.database.windows.net"  # Azure SQL Server 实例名
$DatabaseName = "your_database"                           # 数据库名称
$SqlQuery = "SELECT 1"                                    # 要执行的 SQL 查询
$LogFilePath = "C:\path\to\log\sqlcmd_log.txt"            # 日志文件路径

# 构建 sqlcmd 调用，传递 Access Token
$sqlcmdCommand = @"
sqlcmd -S $ServerInstance -d $DatabaseName -G -I -v AccessToken=$accessToken -Q "$SqlQuery" -o "$LogFilePath"
"@

# 运行 sqlcmd 命令
Invoke-Expression $sqlcmdCommand

# 输出完成信息
Write-Host "SQL query executed using sqlcmd with Access Token. Full log saved to: $LogFilePath"





//-----------------------------------------------------------


要结合 sqlcmd 与 Azure AD Access Token 操作 Azure SQL 数据库，可以通过 ODBC 驱动程序来处理 Access Token 认证。sqlcmd 工具本身没有直接接受 Access Token 的选项，但可以通过使用 ODBC 驱动的连接参数支持 Access Token 进行身份验证。

以下是详细的步骤，演示如何通过 PowerShell 获取 Access Token 并结合 sqlcmd 使用 ODBC 连接执行 SQL 文件。
实现步骤
1. 确保环境已准备

    安装 sqlcmd 工具。
    确保系统已安装支持 AccessToken 参数的 Microsoft ODBC Driver for SQL Server。

2. 安装 PowerShell 的 Azure 模块

你需要使用 Azure PowerShell 模块来获取 Azure AD Access Token。

powershell

# 安装 Azure PowerShell 模块
Install-Module -Name Az -AllowClobber -Force

# 验证模块安装成功
Get-Module -ListAvailable Az

3. 获取 Azure AD Access Token

使用 Azure PowerShell 模块从 Azure Active Directory 获取 Access Token。

powershell

# 登录到 Azure
Connect-AzAccount

# 获取访问 Azure SQL 数据库的 Access Token
$accessToken = (Get-AzAccessToken -ResourceUrl https://database.windows.net/).Token

# 打印 Access Token，调试用
Write-Host "Access Token: $accessToken"

4. 运行 sqlcmd 使用 Access Token

虽然 sqlcmd 没有内置支持 Access Token 的参数，但你可以通过 ODBC 驱动 支持将 Access Token 添加到连接字符串中。
步骤：

    将 Access Token 添加到 ODBC 环境变量。
    使用 sqlcmd 执行 SQL 命令或 SQL 文件。

你可以通过 PowerShell 进行这些操作。

powershell

# 定义 SQL 文件路径和数据库连接参数
$SqlFilePath = "C:\path\to\your\script.sql"   # SQL 文件路径
$ServerInstance = "your_sql_server.database.windows.net"  # Azure SQL Server 实例名
$DatabaseName = "your_database"               # 默认数据库
$LogFilePath = "C:\path\to\log\sqlcmd_log.txt"  # 日志文件路径

# 获取 Access Token
$accessToken = (Get-AzAccessToken -ResourceUrl https://database.windows.net/).Token

# 设置环境变量 SQLCMDACCESSTOKEN，用于 ODBC 驱动
[System.Environment]::SetEnvironmentVariable('SQLCMDACCESSTOKEN', $accessToken, 'Process')

# 构建 sqlcmd 命令，使用 Access Token
$sqlcmdCommand = @"
sqlcmd -S $ServerInstance -d $DatabaseName -G -i `"$SqlFilePath`" -o `"$LogFilePath`"
"@

# 运行 sqlcmd 命令
Invoke-Expression $sqlcmdCommand

# 输出完成信息
Write-Host "SQL script executed using sqlcmd with Access Token. Full log saved to: $LogFilePath"

解释说明：

    获取 Access Token：
        使用 Get-AzAccessToken 从 Azure 获取访问 Azure SQL 数据库的 Access Token，并将其存储在 $accessToken 变量中。

    设置环境变量：
        使用 PowerShell 的 SetEnvironmentVariable 方法将 Access Token 设置为 SQLCMDACCESSTOKEN 环境变量。这是 sqlcmd 和 ODBC 驱动程序能够使用 Access Token 的关键步骤。

    构建 sqlcmd 命令：
        -S：指定 SQL Server 实例的地址（Azure SQL Server 实例名）。
        -d：指定要操作的数据库名称。
        -i：指定要执行的 SQL 文件路径。
        -G：启用 Azure Active Directory 集成身份验证。
        -o：将执行的日志输出到指定文件。

    运行 sqlcmd：
        通过 PowerShell 的 Invoke-Expression 执行构建好的 sqlcmd 命令，并使用 Access Token 进行身份验证。

    日志输出：
        使用 -o 参数将 sqlcmd 的执行结果输出到日志文件，便于查看执行状态。

5. 检查结果

执行完脚本后，可以检查你指定的日志文件路径（例如：C:\path\to\log\sqlcmd_log.txt）以查看执行的 SQL 文件的结果。
注意事项：

    Access Token 有效期：Access Token 的有效期通常为 1 小时，因此每隔一段时间需要重新获取 Token 并更新环境变量。
    ODBC 驱动版本：确保你使用的 ODBC 驱动程序版本支持 Access Token。一般情况下，Microsoft ODBC Driver for SQL Server 17 及以上版本支持此功能。
    Azure Active Directory 权限：确保你已经为 Azure SQL 数据库正确配置了 Azure AD 集成身份验证的权限。

结论：

通过 PowerShell 获取 Azure AD Access Token 后，你可以将其注入到 sqlcmd 使用的 ODBC 驱动中来认证到 Azure SQL 数据库。这个方法提供了一种通过 Access Token 和 sqlcmd 结合使用的有效方式，适合需要进行脚本化 SQL 操作的 Azure SQL 数据库管理场景。
You said:
确保系统已安装支持 AccessToken 参数的 Microsoft ODBC Driver for SQL Server  如何确认
ChatGPT said:
ChatGPT

要确认系统是否已经安装了支持 Access Token 的 Microsoft ODBC Driver for SQL Server，你可以通过以下几种方式检查已安装的 ODBC 驱动版本。Microsoft ODBC Driver for SQL Server 17.3 及更高版本支持 Access Token。
方法 1：通过 ODBC 数据源管理器查看

    打开 ODBC 数据源管理器：
        在 Windows 中，按 Windows + R，输入 odbcad32，然后按回车。
        这将打开 ODBC 数据源管理器。

    查看已安装的驱动程序：
        切换到 驱动程序（Drivers）选项卡。
        在列表中找到 Microsoft ODBC Driver for SQL Server。
        查看其版本号，确保版本号是 17.3 或更高版本。

    示例：
        Microsoft ODBC Driver 17 for SQL Server
        版本: 17.x.x

方法 2：通过命令行查询 ODBC 驱动

你也可以通过命令行检查已安装的 ODBC 驱动程序和其版本。

    打开 PowerShell 或命令提示符。

    运行以下命令以列出所有已安装的 ODBC 驱动程序：

    powershell

Get-OdbcDriver | Where-Object { $_.Name -like "*SQL Server*" }

或者在命令提示符中运行：

cmd

    odbcconf /a { {Q,Drivers} }

    这将输出一个包含所有已安装 ODBC 驱动的列表，确保其中有 Microsoft ODBC Driver 17 for SQL Server，并确认版本号。

方法 3：检查注册表

    打开 注册表编辑器，按 Windows + R，输入 regedit，然后按回车。

    导航到以下路径：

    HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers

    在右侧窗口中找到 ODBC Driver 17 for SQL Server，然后点击它查看其详细信息，确认版本号是否符合要求。

方法 4：下载和安装最新的 ODBC 驱动

如果系统中没有安装合适的 ODBC 驱动程序，或者版本低于 17.3，你可以下载最新版本。

    下载 Microsoft ODBC Driver 17 for SQL Server：
        前往微软官方网站下载最新的 ODBC Driver for SQL Server： Microsoft ODBC Driver for SQL Server

    安装驱动程序：
        下载后运行安装程序，按照提示完成安装。

    安装完成后，再次通过上述方法验证驱动是否安装成功。

结论

    要支持 Access Token，你需要确保 Microsoft ODBC Driver 17 for SQL Server 的版本为 17.3 或更高版本。
    你可以通过 ODBC 数据源管理器、命令行、注册表等方式检查已安装的 ODBC 驱动版本。如果版本不够高，可以从微软官网下载并安装最新的 ODBC 驱动程序。




    //---------------------------


    如果你希望在调用 sqlcmd 命令时明确指定使用的 ODBC 驱动程序版本（如 ODBC Driver 17 或 18），则需要通过连接字符串指定驱动程序。虽然 sqlcmd 命令本身不允许直接设置 ODBC 驱动版本，但你可以通过设置数据源名称（DSN）来控制使用的 ODBC 驱动版本。
    步骤 1：创建 DSN（数据源名称）

    要指定 sqlcmd 使用特定的 ODBC 驱动程序版本，可以先配置一个 DSN（数据源名称）来指定所需的 ODBC 驱动。

        打开 ODBC 数据源管理器：
            按 Windows + R，输入 odbcad32，然后按回车。
            选择 “系统 DSN” 或 “用户 DSN”，点击 “添加”。

        选择 ODBC 驱动版本：
            在弹出的驱动程序列表中，选择 “ODBC Driver 17 for SQL Server” 或 “ODBC Driver 18 for SQL Server”，然后点击 下一步。

        设置 DSN 名称和服务器信息：
            为 DSN 选择一个名称，例如：MyDSN_ODBC17（或 MyDSN_ODBC18）。
            输入 服务器地址，并完成数据源的配置。

    步骤 2：使用 DSN 在 sqlcmd 中指定 ODBC 驱动版本

    一旦 DSN 配置完成，你可以在 sqlcmd 命令中使用该 DSN 来确保使用特定版本的 ODBC 驱动。
    示例：通过 sqlcmd 使用 DSN 连接到 SQL Server

    powershell

    # 使用 PowerShell 调用 sqlcmd，并通过 DSN 来指定 ODBC 驱动
    $dsnName = "MyDSN_ODBC17"  # 使用你配置的 DSN 名称
    $SqlFilePath = "C:\path\to\your\script.sql"   # SQL 文件路径
    $LogFilePath = "C:\path\to\log\sqlcmd_log.txt"  # 日志文件路径

    # 调用 sqlcmd，使用 DSN 来指定 ODBC 驱动
    $sqlcmdCommand = @"
    sqlcmd -D $dsnName -i `"$SqlFilePath`" -o `"$LogFilePath`"
    "@

    # 运行 sqlcmd 命令
    Invoke-Expression $sqlcmdCommand

    # 输出完成信息
    Write-Host "SQL script executed using sqlcmd with DSN: $dsnName. Full log saved to: $LogFilePath"

    示例：直接指定数据库名和服务器地址

    如果不想通过 DSN，可以直接使用连接字符串，但这时不能明确指定 ODBC 驱动版本。通常，sqlcmd 会使用系统中安装的最新版本 ODBC 驱动。

    powershell

    # 设置 SQL Server 实例信息
    $serverInstance = "your_sql_server.database.windows.net"
    $databaseName = "your_database"
    $SqlFilePath = "C:\path\to\your\script.sql"   # SQL 文件路径
    $LogFilePath = "C:\path\to\log\sqlcmd_log.txt"  # 日志文件路径

    # 调用 sqlcmd 并直接指定服务器和数据库信息
    $sqlcmdCommand = @"
    sqlcmd -S $serverInstance -d $databaseName -i `"$SqlFilePath`" -o `"$LogFilePath`"
    "@

    # 运行 sqlcmd 命令
    Invoke-Expression $sqlcmdCommand

    # 输出完成信息
    Write-Host "SQL script executed using sqlcmd. Full log saved to: $LogFilePath"

    说明：

        DSN：通过 DSN 来指定 ODBC 驱动版本，可以确保 sqlcmd 使用指定版本的驱动程序（如 ODBC Driver 17 for SQL Server 或 ODBC Driver 18 for SQL Server）。
        日志输出：-o 参数将日志输出到指定文件中，便于查看执行结果。
        SQL 文件执行：通过 -i 参数指定 SQL 脚本文件路径，sqlcmd 将执行该文件中的 SQL 语句。

    结论：

        使用 DSN 是确保 sqlcmd 使用特定版本的 ODBC 驱动程序的最佳方式。你可以在 ODBC 数据源管理器中配置 DSN，并在 sqlcmd 调用中使用 -D 参数指定该 DSN 名称。
        如果你没有设置 DSN，sqlcmd 通常会自动使用最新的 ODBC 驱动程序版本。


# 设置 SQLCMDACCESSTOKEN 环境变量
[System.Environment]::SetEnvironmentVariable('SQLCMDACCESSTOKEN', $accessToken, 'Process')




@echo off
echo Please enter your password:
set /p password=Password:

REM 检查用户是否输入了密码
if "%password%"=="" (
    echo No password entered. Exiting...
    exit /b
)

echo Password entered. Continuing the script...
REM 这里可以加入你的其他逻辑
echo Running the rest of the script...

REM 结束脚本
pause