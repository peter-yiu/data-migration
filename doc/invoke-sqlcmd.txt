try {
    # SQL Server 连接信息
    $serverName = "your-server-name"
    $databaseName = "your-database-name"
    $sqlFilePath = "C:\path\to\myScript.sql"

    # 执行 sqlcmd 命令
    $sqlcmdCommand = "sqlcmd -S $serverName -d $databaseName -i $sqlFilePath"
    $output = & cmd /c $sqlcmdCommand 2>&1

    # 检查 sqlcmd 的退出状态
    if ($LASTEXITCODE -ne 0) {
        Write-Host "SQL script execution failed with the following error(s):"
        $output | ForEach-Object { Write-Host $_ }
        throw "SQLCMD execution failed with exit code $LASTEXITCODE"
    } else {
        Write-Host "SQL script execution succeeded."
        $output | ForEach-Object { Write-Host $_ }
    }
} catch {
    Write-Host "An error occurred while executing the SQL script:"
    Write-Host $_.Exception.Message
}

总结

    使用 Try...Catch 块可以捕获 sqlcmd 执行中的异常。
    使用 $LASTEXITCODE 来判断 sqlcmd 的退出状态码，0 表示成功，非 0 表示失败。
    捕获输出和错误流通过 2>&1 重定向到标准输出，并将输出保存在变量中以便后续处理。

这样可以确保 SQL 执行时发生的任何错误都能够被 PowerShell 捕获和处理。





修改后的 BAT 脚本：

bat

@echo off
setlocal

REM 执行循环
for /l %%i in (1,1,3) do (
    echo Executing PowerShell script, iteration %%i...

    REM 使用 -Command 参数调用 PowerShell 并传递退出码
    powershell.exe -ExecutionPolicy Bypass -Command "& {C:\path\to\your-script.ps1; exit $LASTEXITCODE}"

    REM 检查 PowerShell 的退出码
    if %ERRORLEVEL% neq 0 (
        echo PowerShell script failed. Exiting loop...
        exit /b 1  REM 终止批处理脚本并返回非零退出码
    )

    echo PowerShell script succeeded, continuing...
)

echo All iterations completed successfully.
exit /b 0

解释：

    -Command：将 PowerShell 脚本封装在一个 & {} 代码块中运行，之后通过 exit $LASTEXITCODE 明确传递 PowerShell 脚本执行的退出码给 BAT 脚本。
    $LASTEXITCODE：这是 PowerShell 中用于存储上一个外部程序的退出码（在此场景中，sqlcmd 命令的退出码）。通过 exit $LASTEXITCODE 传递该退出码到 BAT。

2. 确保 PowerShell 退出码正确

在 PowerShell 脚本中，确保异常时使用 exit，同时通过 $LASTEXITCODE 确保将外部命令的退出码正确传递：

powershell

try {
    # 模拟执行的逻辑
    $sqlcmdCommand = "sqlcmd -S your-server -d your-database -i your-script.sql -b"
    $output = & cmd /c $sqlcmdCommand 2>&1

    if ($LASTEXITCODE -ne 0) {
        Write-Host "SQL execution failed with error(s):"
        $output | ForEach-Object { Write-Host $_ }
        throw "SQLCMD execution failed with exit code $LASTEXITCODE"
    } else {
        Write-Host "SQL execution succeeded."
        $output | ForEach-Object { Write-Host $_ }
    }

    # 正常退出
    exit 0
}
catch {
    # 捕获异常并返回非零退出码
    Write-Host "An error occurred: $_"
    exit 1
}

3. 检查 PowerShell 执行环境

如果问题仍然存在，确保以下几点：

    PowerShell 版本：检查是否使用最新的 PowerShell 版本，尤其是在兼容性问题较少的 PowerShell 5.x 及更新版本。
    脚本执行策略：确保没有脚本执行策略阻止 PowerShell 正常退出。使用 -ExecutionPolicy Bypass 来暂时绕过这些策略。

总结：

要确保 PowerShell 返回正确的退出码给 BAT 脚本，建议使用 powershell.exe -Command 方式执行 PowerShell 脚本，并在 PowerShell 中使用 exit $LASTEXITCODE。这种方式可以确保 PowerShell 的退出码传递到 BAT 脚本，从而让 %ERRORLEVEL% 正确反映 PowerShell 脚本的执行结果。






如果你在 BAT 脚本 中调用 PowerShell 脚本，传递了参数并使用了 exit $LASTEXITCODE，但仍然发现 %ERRORLEVEL% 始终为 0，可能是因为 powershell.exe 在某些情况下无法正确传递退出码。为了确保退出码正确传递，你可以使用以下改进方法来捕获 PowerShell 脚本中的错误并确保在 BAT 脚本中能够正确获取。
解决方法：

    使用 $global:LASTEXITCODE 代替 $LASTEXITCODE：有时在使用 exit 退出时，PowerShell 可能不会正确传递 $LASTEXITCODE。你可以尝试使用 $global:LASTEXITCODE。
    确保 PowerShell 退出码传递：使用 exit 来显式退出并传递返回值。

更新的解决方案：
1. PowerShell 脚本（your-script.ps1）

确保在发生异常时，PowerShell 脚本会设置全局退出码并正确退出：

powershell

param (
    [string]$param1,
    [string]$param2
)

try {
    Write-Host "Received parameters: $param1 and $param2"

    # 模拟 SQL 执行的逻辑
    $sqlcmdCommand = "sqlcmd -S $param1 -d $param2 -i C:\path\to\your-sql-file.sql -b"
    $output = & cmd /c $sqlcmdCommand 2>&1

    if ($global:LASTEXITCODE -ne 0) {
        Write-Host "SQL execution failed with error(s):"
        $output | ForEach-Object { Write-Host $_ }
        throw "SQLCMD execution failed with exit code $global:LASTEXITCODE"
    } else {
        Write-Host "SQL execution succeeded."
        $output | ForEach-Object { Write-Host $_ }
    }

    # 正常退出，返回成功
    exit 0
}
catch {
    Write-Host "An error occurred: $_"
    exit 1  # 返回非零退出码表示失败
}

2. BAT 脚本（your-batch-script.bat）

确保通过 -Command 调用 PowerShell，并捕获正确的退出码：

bat

@echo off
setlocal

REM 定义参数
set serverName=your-server-name
set databaseName=your-database-name

REM 执行循环
for /l %%i in (1,1,3) do (
    echo Executing PowerShell script with parameters: %serverName% and %databaseName%, iteration %%i...

    REM 调用 PowerShell 脚本并传递参数，同时捕获退出码
    powershell.exe -ExecutionPolicy Bypass -Command "& {C:\path\to\your-script.ps1 -param1 '%serverName%' -param2 '%databaseName%'; exit $global:LASTEXITCODE}"

    REM 检查 PowerShell 的退出码
    if %ERRORLEVEL% neq 0 (
        echo PowerShell script failed with ERRORLEVEL %ERRORLEVEL%. Exiting loop...
        exit /b 1  REM 终止批处理脚本并返回非零退出码
    )

    echo PowerShell script succeeded with ERRORLEVEL %ERRORLEVEL%, continuing...
)

echo All iterations completed successfully.
exit /b 0




# 定义文件夹路径和数据库信息
$folderPath = "C:\path\to\sql\files"  # 替换为你的 SQL 文件夹路径
$serverName = "your-server-name"
$databaseName = "your-database-name"
$credential = "your-credential"  # 如果需要，填入你的认证信息
$logFile = "C:\path\to\output\log.txt"  # 日志文件路径

# 查找所有 .sql 文件
$sqlFiles = Get-ChildItem -Path $folderPath -Filter *.sql

# 遍历每个 .sql 文件并使用 sqlcmd 执行
foreach ($file in $sqlFiles) {
    Write-Host "Running SQL file: $($file.FullName)"

    # 构建 sqlcmd 命令
    $sqlcmdCommand = "sqlcmd -S $serverName -d $databaseName -i `"$($file.FullName)`" -b -o $logFile"

    try {
        # 执行 sqlcmd 并捕获输出和错误
        & cmd /c $sqlcmdCommand

        # 检查退出码
        if ($global:LASTEXITCODE -ne 0) {
            Write-Host "Execution failed for: $($file.FullName) with exit code $global:LASTEXITCODE" -ForegroundColor Red
            throw "SQL file failed: $($file.FullName)"
        } else {
            Write-Host "Execution succeeded for: $($file.FullName)" -ForegroundColor Green
        }
    }
    catch {
        Write-Host "Error: $_" -ForegroundColor Red
    }
}





为什么不能直接使用maven命令下载呢
ChatGPT said:
ChatGPT

实际上，直接使用 Maven 命令下载 Artifact 是完全可行的，并且比手动构建下载脚本更简便、可靠，特别是在 Maven 仓库的结构复杂时。Maven 的内置依赖管理功能可以自动处理 Snapshot 版本和校验完整性，以下是实现方法的详细说明。
直接使用 Maven 命令下载 Snapshot Artifact
方法

使用 Maven 的 dependency:get 插件来下载指定的 Artifact，包括 Snapshot 版本。
命令示例

mvn dependency:get -Dartifact=<groupId>:<artifactId>:<version> -DrepoUrl=<repositoryUrl> -Ddest=<outputDirectory>

参数说明

    -Dartifact：指定 Artifact 的坐标（groupId:artifactId:version[:packaging][:classifier]）。
        例如：com.example:my-artifact:1.0.0-SNAPSHOT。
    -DrepoUrl：Maven 仓库的 URL。
        例如：https://nexus.example.com/repository/maven-snapshots。
    -Ddest：指定下载到的目录。

示例

假设要下载以下 Artifact：

    Group ID：com.example
    Artifact ID：my-artifact
    Version：1.0.0-SNAPSHOT
    Maven 仓库 URL：https://nexus.example.com/repository/maven-snapshots
    输出目录：C:\downloads

运行以下命令：

mvn dependency:get -Dartifact=com.example:my-artifact:1.0.0-SNAPSHOT -DrepoUrl=https://nexus.example.com/repository/maven-snapshots -Ddest=C:\downloads

优点

    自动处理 Snapshot 版本
        Maven 会根据 maven-metadata.xml 自动解析最新的 Snapshot 版本。
    内置完整性校验
        Maven 会自动下载并验证校验和（SHA1 或 MD5）。
    支持依赖传递
        如果 Artifact 有依赖关系，Maven 还能下载这些依赖。
    无需额外脚本
        使用标准命令即可完成复杂的任务。

输出示例

[INFO] --- maven-dependency-plugin:3.1.2:get (default-cli) @ standalone-pom ---
[INFO] Resolving artifact com.example:my-artifact:jar:1.0.0-SNAPSHOT from https://nexus.example.com/repository/maven-snapshots
[INFO] Downloaded: https://nexus.example.com/repository/maven-snapshots/com/example/my-artifact/1.0.0-SNAPSHOT/my-artifact-1.0.0-20241120.123456-1.jar
[INFO] Artifact resolved to: C:\downloads\my-artifact-1.0.0-20241120.123456-1.jar

对比手动脚本的优势

    更简洁：无需手动解析 maven-metadata.xml 或拼接 URL。
    内置校验：Maven 自动校验完整性，无需额外下载 .sha1 文件。
    复用性强：Maven 已为这种场景优化，减少了脚本维护的复杂度。

适配 PowerShell 脚本

如果需要在 PowerShell 中调用，可以用如下脚本：

# 参数设置
$artifact = "com.example:my-artifact:1.0.0-SNAPSHOT"
$repoUrl = "https://nexus.example.com/repository/maven-snapshots"
$outputPath = "C:\downloads"

# 调用 Maven 下载命令
$mavenCommand = "mvn dependency:get -Dartifact=$artifact -DrepoUrl=$repoUrl -Ddest=$outputPath"
Invoke-Expression $mavenCommand

总结

如果你的工作流允许使用 Maven，建议直接采用上述方法。它能自动完成版本解析和完整性校验，比手动脚本更可靠。