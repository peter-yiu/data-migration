使用maven 提交artifact到nexus 的时候如何保证完整性
ChatGPT said:
ChatGPT

在使用 Maven 提交 artifact 到 Nexus 时，完整性是关键，可以通过以下方式来确保 artifact 的完整性和安全性：
1. 启用校验文件 (Checksum Verification)

当 Maven 上传 artifacts 到 Nexus 时，会生成校验文件（如 .md5 和 .sha1），用于确保传输过程中文件没有被篡改或损坏。

    自动生成校验文件： Maven 会默认生成校验文件并上传到 Nexus。确保 Nexus 的存储库设置启用了校验验证。

    <distributionManagement>
        <repository>
            <id>nexus</id>
            <url>https://your-nexus-url/repository/maven-releases/</url>
        </repository>
        <snapshotRepository>
            <id>nexus-snapshots</id>
            <url>https://your-nexus-url/repository/maven-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

    验证校验文件： 上传完成后，Nexus 可以自动校验文件的完整性。你也可以手动下载并运行校验工具来验证。

2. 使用 GPG 签名

为 artifacts 添加 GPG 签名可以进一步增强安全性和可信性：

    安装 GPG 并生成密钥：

gpg --gen-key

配置 Maven GPG 插件： 在 pom.xml 中添加 GPG 插件：

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-gpg-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <phase>verify</phase>
                        <goals>
                            <goal>sign</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    上传签名： Maven 会为每个 artifact 生成 .asc 签名文件并上传到 Nexus。

3. 配置 SSL/TLS

通过 HTTPS 连接到 Nexus，防止数据在传输过程中被劫持。

    在 Maven 的 settings.xml 中配置服务器地址为 HTTPS：

    <servers>
        <server>
            <id>nexus</id>
            <username>your-username</username>
            <password>your-password</password>
        </server>
    </servers>

    确保 Nexus 配置了 SSL/TLS，并使用有效的证书。

4. 启用 Staging Repository

在 Nexus 中启用 Staging Repository，可以在 artifacts 上传后先存放在临时区域，经过审核和验证后再发布到主仓库。

    配置 Maven 部署到 Staging： Nexus 提供 Staging 功能，通过 Maven 部署可以触发自动审核。

    审核发布： 在 Nexus UI 中检查 Staging Repository 的 artifacts，确保完整性和正确性后，再点击 "Release"。

5. 验证上传成功

在上传 artifact 后，可以通过以下方法验证：

    查询 Nexus UI：
        登录 Nexus，找到对应的 Repository。
        确认上传的 artifacts、校验文件、GPG 签名文件都存在。

    手动下载校验：
        使用 wget 或其他工具下载 artifact 和对应的校验文件。
        使用 sha256sum 或 gpg 验证完整性和签名。

6. 自动化完整性检查

你可以在 CI/CD 管道中添加自动化检查步骤：

    下载上传的 artifacts 并验证 checksum 或签名。
    使用 Nexus REST API 查询 artifact 的状态，确保上传成功。

通过以上方式，你可以确保 Maven 提交的 artifacts 在 Nexus 中的完整性和安全性。
You said:
上传的时候是否需要 提供checksum
ChatGPT said:
ChatGPT

当使用 Maven 上传 artifact 到 Nexus 时，无需手动提供 checksum，因为 Maven 和 Nexus 会自动处理 checksum 的生成和校验。
Maven 和 Nexus 的默认行为

    Maven 自动生成 checksum：
        在上传 artifact 时，Maven 会为每个文件（如 JAR、POM、等）自动生成 .md5 和 .sha1 校验文件。
        这些 checksum 文件会与 artifact 一起上传到 Nexus。

    Nexus 自动校验 checksum：
        Nexus 会根据接收到的 artifact 和其对应的 checksum 文件验证完整性。
        如果 checksum 校验失败，上传过程会被拒绝。

需要手动提供 checksum 的场景

尽管 Maven 和 Nexus 自动处理 checksum，一些高级场景可能需要手动提供 checksum，例如：

    通过 REST API 上传 artifact：
        如果你使用 Nexus 的 REST API 手动上传 artifact，而非通过 Maven，那么需要明确提供 checksum。
        REST API 的请求中可以包含 artifact 的校验值，例如：

    curl -u username:password --upload-file my-artifact.jar "https://nexus-url/repository/maven-releases/com/example/my-artifact.jar" \
      -H "X-Checksum-MD5: <md5_checksum>" \
      -H "X-Checksum-SHA1: <sha1_checksum>"

特殊需求或自定义部署：

    某些安全策略可能要求 checksum 文件提前生成并上传。
    使用工具如 sha256sum 或 openssl 手动生成 checksum：

        sha256sum my-artifact.jar > my-artifact.jar.sha256

推荐做法

    通过 Maven 的标准命令上传：

mvn deploy

这会自动生成和上传 checksum，无需额外配置。

启用 GPG 签名（可选）： 如果需要更高的安全性，结合 GPG 签名，以确保 artifact 的来源可信。

验证上传后的完整性：

    在 Nexus Web UI 中检查 artifact 和 checksum 文件是否正确。
    或者通过下载和手动验证：

        sha256sum -c my-artifact.jar.sha256

通过 Maven 上传时，无需手动生成 checksum。只需使用 Maven 的标准流程，Nexus 会处理校验相关的细节。如果使用 REST API 或其他非标准方式上传，则需要手动提供 checksum 信息以确保完整性。
You said:
直接提供上传的完整脚本， 不使用pom
ChatGPT said:
ChatGPT

如果你想在不依赖 pom.xml 的情况下直接上传 artifact 到 Nexus，可以通过 Maven 的命令行选项 mvn deploy:deploy-file，或者使用 curl 命令来完成上传。
方法 1: 使用 mvn deploy:deploy-file

Maven 的 deploy:deploy-file 插件允许直接上传 artifact，而不需要修改 pom.xml 文件。
脚本示例：

#!/bin/bash

# Nexus Repository URL (replace with your Nexus repository URL)
NEXUS_URL="https://your-nexus-url/repository/maven-releases"

# Artifact details
GROUP_ID="com.example"
ARTIFACT_ID="my-artifact"
VERSION="1.0.0"
PACKAGING="jar"
FILE_PATH="/path/to/your/artifact.jar"
POM_FILE="/path/to/your/pom.xml"

# Maven credentials (if needed, replace with your Nexus credentials)
REPOSITORY_ID="nexus" # This must match the <server> ID in ~/.m2/settings.xml

# Upload command
mvn deploy:deploy-file \
  -DgroupId="$GROUP_ID" \
  -DartifactId="$ARTIFACT_ID" \
  -Dversion="$VERSION" \
  -Dpackaging="$PACKAGING" \
  -Dfile="$FILE_PATH" \
  -Durl="$NEXUS_URL" \
  -DrepositoryId="$REPOSITORY_ID" \
  -DpomFile="$POM_FILE"

方法 2: 使用 curl 命令上传

如果你想完全跳过 Maven，可以使用 curl 直接上传到 Nexus，通过其 REST API。
脚本示例：

#!/bin/bash

# Nexus Repository URL (replace with your Nexus repository URL)
NEXUS_URL="https://your-nexus-url/repository/maven-releases"

# Artifact details
GROUP_ID="com.example"
ARTIFACT_ID="my-artifact"
VERSION="1.0.0"
PACKAGING="jar"
FILE_PATH="/path/to/your/artifact.jar"

# Convert group ID to path (replace dots with slashes)
GROUP_PATH=$(echo "$GROUP_ID" | tr '.' '/')

# Construct artifact upload URL
UPLOAD_URL="$NEXUS_URL/$GROUP_PATH/$ARTIFACT_ID/$VERSION/$ARTIFACT_ID-$VERSION.$PACKAGING"

# Nexus credentials
USERNAME="your-username"
PASSWORD="your-password"

# Upload artifact
curl -u "$USERNAME:$PASSWORD" --upload-file "$FILE_PATH" "$UPLOAD_URL"

# Optionally, upload checksum files
md5sum "$FILE_PATH" | awk '{print $1}' > "$FILE_PATH.md5"
sha1sum "$FILE_PATH" | awk '{print $1}' > "$FILE_PATH.sha1"

curl -u "$USERNAME:$PASSWORD" --upload-file "$FILE_PATH.md5" "$UPLOAD_URL.md5"
curl -u "$USERNAME:$PASSWORD" --upload-file "$FILE_PATH.sha1" "$UPLOAD_URL.sha1"

关键点说明：

    使用 Maven deploy:deploy-file：
        优点：处理了校验文件生成和上传。
        缺点：需要 Maven 工具。

    使用 curl 直接上传：
        优点：更轻量，可以绕过 Maven 工具。
        缺点：需要手动生成校验文件，稍显复杂。

    校验文件 (Checksum)：
        Maven 会自动生成 .md5 和 .sha1，而使用 curl 时需要手动生成。

    权限：
        确保你有权限访问 Nexus 并上传 artifact。可以通过 SSH 密钥或用户名密码认证。

选择适合你的方式即可！
You said:
maven 不使用pom
ChatGPT said:
ChatGPT

在 Maven 中，如果不使用 pom.xml 文件上传 artifact，可以直接使用 mvn deploy:deploy-file 命令，该命令完全基于命令行参数工作，无需任何 POM 配置。

以下是完整的脚本和说明：
直接上传 Artifact 的 Maven 脚本

#!/bin/bash

# 必要的变量
GROUP_ID="com.example"                     # 替换为实际的 Group ID
ARTIFACT_ID="my-artifact"                  # 替换为实际的 Artifact ID
VERSION="1.0.0"                            # 替换为实际版本号
PACKAGING="jar"                            # Artifact 的类型 (如 jar、war 等)
FILE_PATH="/path/to/your/artifact.jar"     # 替换为实际 Artifact 路径
NEXUS_URL="https://your-nexus-url/repository/maven-releases"  # Nexus 存储库地址
REPOSITORY_ID="nexus-repo"                 # 在 ~/.m2/settings.xml 中配置的 <server> ID

# 上传 Artifact
mvn deploy:deploy-file \
  -DgroupId="${GROUP_ID}" \
  -DartifactId="${ARTIFACT_ID}" \
  -Dversion="${VERSION}" \
  -Dpackaging="${PACKAGING}" \
  -Dfile="${FILE_PATH}" \
  -Durl="${NEXUS_URL}" \
  -DrepositoryId="${REPOSITORY_ID}"

命令参数说明

    -DgroupId:
        指定 Maven 项目的 Group ID，例如 com.example。

    -DartifactId:
        指定 Maven 项目的 Artifact ID，例如 my-artifact。

    -Dversion:
        Artifact 的版本号，例如 1.0.0。

    -Dpackaging:
        文件类型，通常是 jar、war 或 pom。

    -Dfile:
        本地 artifact 文件的路径，例如 /path/to/your/artifact.jar。

    -Durl:
        Nexus 存储库的 URL，通常以 /repository/<repository-name> 结尾。

    -DrepositoryId:
        Maven 配置文件 ~/.m2/settings.xml 中定义的 <server> 的 ID，用于认证。

示例上传的过程

假设有以下环境：

    Group ID: com.example
    Artifact ID: demo-app
    Version: 1.0.0
    文件路径: /tmp/demo-app.jar
    Nexus 存储库地址: https://nexus.example.com/repository/maven-releases
    存储库 ID: nexus-releases

执行以下命令：

mvn deploy:deploy-file \
  -DgroupId="com.example" \
  -DartifactId="demo-app" \
  -Dversion="1.0.0" \
  -Dpackaging="jar" \
  -Dfile="/tmp/demo-app.jar" \
  -Durl="https://nexus.example.com/repository/maven-releases" \
  -DrepositoryId="nexus-releases"

带有附属文件的上传 (Source/JavaDoc)

如果需要上传附属文件（例如源码或 JavaDoc），可以添加以下参数：

mvn deploy:deploy-file \
  -DgroupId="com.example" \
  -DartifactId="demo-app" \
  -Dversion="1.0.0" \
  -Dpackaging="jar" \
  -Dfile="/tmp/demo-app.jar" \
  -Durl="https://nexus.example.com/repository/maven-releases" \
  -DrepositoryId="nexus-releases" \
  -Dsources="/tmp/demo-app-sources.jar" \
  -Djavadoc="/tmp/demo-app-javadoc.jar"

常见问题

    如何提供认证信息？
        在 ~/.m2/settings.xml 中配置 <server>：

        <servers>
          <server>
            <id>nexus-releases</id>
            <username>your-username</username>
            <password>your-password</password>
          </server>
        </servers>

    如何上传多个 artifact？
        使用脚本遍历所有文件并调用 deploy:deploy-file。

    是否可以上传 checksum？
        Maven 自动生成和上传 checksum 文件，无需手动处理。

这种方法特别适合单次上传或者没有完整 Maven 项目的情况。如果有多个依赖或复杂的构建流程，建议使用标准的 pom.xml 方式进行管理。
You said:
在window 用powershell 脚本
ChatGPT said:
ChatGPT

以下是一个在 Windows 上使用 PowerShell 脚本，通过 Maven 命令 deploy:deploy-file 将 artifact 上传到 Nexus 的完整实现，适合没有 pom.xml 文件的情况。
PowerShell 脚本实现

# 定义变量
$groupId = "com.example"                       # Maven 项目的 Group ID
$artifactId = "my-artifact"                    # Maven 项目的 Artifact ID
$version = "1.0.0"                             # Artifact 的版本
$packaging = "jar"                             # 文件类型 (jar, war, 等)
$filePath = "C:\path\to\artifact.jar"          # 本地 artifact 文件路径
$nexusUrl = "https://your-nexus-url/repository/maven-releases"  # Nexus 存储库 URL
$repositoryId = "nexus-releases"               # Maven settings.xml 中配置的 <server> ID
$mavenPath = "C:\path\to\mvn.cmd"              # Maven 的路径，如果 Maven 在 PATH 中可以忽略

# 构建 Maven deploy:deploy-file 命令
$mavenCommand = @"
"$mavenPath" deploy:deploy-file `
  -DgroupId=$groupId `
  -DartifactId=$artifactId `
  -Dversion=$version `
  -Dpackaging=$packaging `
  -Dfile=$filePath `
  -Durl=$nexusUrl `
  -DrepositoryId=$repositoryId
"@

# 执行 Maven 命令
Write-Host "Executing Maven Command..."
Write-Host $mavenCommand
Invoke-Expression $mavenCommand

脚本说明

    变量设置:
        $groupId: 项目的 Group ID，例如 com.example。
        $artifactId: 项目的 Artifact ID，例如 my-artifact。
        $version: 项目版本号，例如 1.0.0。
        $packaging: Artifact 的类型，例如 jar。
        $filePath: 本地 Artifact 文件的绝对路径。
        $nexusUrl: Nexus 仓库的 URL，通常以 /repository/<repository-name> 结尾。
        $repositoryId: Nexus 仓库对应的 <server> ID，需要在 Maven 的 settings.xml 中配置。

    Maven 路径:
        $mavenPath 指向 Maven 可执行文件。如果 Maven 已经添加到环境变量 PATH，可以直接写 "mvn.cmd"。

    命令构建与执行:
        使用多行字符串 @"" 构建 Maven 命令，换行用反引号 `。
        使用 Invoke-Expression 执行生成的 Maven 命令。

运行示例

假设:

    Artifact 位于 C:\artifacts\my-app.jar。
    Nexus URL 为 https://nexus.example.com/repository/maven-releases。
    使用的 Repository ID 为 nexus-releases。

运行脚本的结果:

PS C:\> .\deploy-artifact.ps1
Executing Maven Command...
"C:\path\to\mvn.cmd" deploy:deploy-file `
  -DgroupId=com.example `
  -DartifactId=my-artifact `
  -Dversion=1.0.0 `
  -Dpackaging=jar `
  -Dfile=C:\artifacts\my-app.jar `
  -Durl=https://nexus.example.com/repository/maven-releases `
  -DrepositoryId=nexus-releases
[INFO] --- maven-deploy-plugin:2.8.2:deploy-file (default-cli) ---
[INFO] Uploading: https://nexus.example.com/repository/maven-releases/com/example/my-artifact/1.0.0/my-artifact-1.0.0.jar
[INFO] Uploaded successfully.

如何配置 Maven 身份验证

在 C:\Users\<用户名>\.m2\settings.xml 中添加以下配置：

<servers>
  <server>
    <id>nexus-releases</id>
    <username>your-username</username>
    <password>your-password</password>
  </server>
</servers>

改进：支持多个文件

如果需要上传多个文件，可以循环调用脚本，示例如下：

# Artifact 文件列表
$artifacts = @(
    "C:\artifacts\artifact1.jar",
    "C:\artifacts\artifact2.jar"
)

# 循环上传
foreach ($file in $artifacts) {
    $mavenCommand = @"
    "$mavenPath" deploy:deploy-file `
      -DgroupId=com.example `
      -DartifactId=my-artifact `
      -Dversion=1.0.0 `
      -Dpackaging=jar `
      -Dfile=$file `
      -Durl=$nexusUrl `
      -DrepositoryId=$repositoryId
    "@
    Write-Host "Executing Maven Command for $file..."
    Invoke-Expression $mavenCommand
}

这样可以实现批量上传功能。
You said:
如何下载artifact 并且保证完整性
ChatGPT said:
ChatGPT

下载 Maven artifact 并验证完整性，通常通过对比文件的校验和（checksum）来实现。这可以通过 Maven 自带工具或其他命令实现。以下是详细步骤和示例代码。
1. 手动下载 Artifact 并验证完整性
步骤

    下载 Artifact 文件
    下载目标 .jar 文件和对应的校验文件（通常是 .sha1 或 .md5）。
        示例文件：
            artifact-1.0.0.jar
            artifact-1.0.0.jar.sha1

    计算本地文件的校验和
        使用工具（如 certutil 或 Get-FileHash）计算下载的 .jar 文件的校验和。

    比较校验和
        对比校验文件中的值和计算的值，确保一致性。

2. 使用 Maven 下载 Artifact 并验证
Maven 命令

使用 Maven 的 dependency:get 插件下载 Artifact：

mvn dependency:get -Dartifact=com.example:my-artifact:1.0.0 -Dtransitive=false

完整性验证

Maven 自动验证校验和（通过远程仓库的 .sha1 文件）。如果校验和验证失败，会抛出错误并停止下载。
3. 使用 PowerShell 下载并验证
示例脚本

以下 PowerShell 脚本下载 Artifact 和校验文件，并验证完整性：

# Variables
$artifactUrl = "https://nexus.example.com/repository/maven-releases/com/example/my-artifact/1.0.0/my-artifact-1.0.0.jar"
$checksumUrl = "$artifactUrl.sha1"
$outputPath = "C:\downloads"
$filePath = Join-Path $outputPath "my-artifact-1.0.0.jar"
$checksumPath = "$filePath.sha1"

# Ensure output directory exists
if (!(Test-Path $outputPath)) {
    New-Item -ItemType Directory -Path $outputPath
}

# Download artifact and checksum
Invoke-WebRequest -Uri $artifactUrl -OutFile $filePath
Invoke-WebRequest -Uri $checksumUrl -OutFile $checksumPath

# Compute local checksum
$localChecksum = (Get-FileHash -Algorithm SHA1 -Path $filePath).Hash.ToLower()

# Read remote checksum
$remoteChecksum = Get-Content $checksumPath | ForEach-Object { $_.Trim() }

# Compare checksums
if ($localChecksum -eq $remoteChecksum) {
    Write-Host "Checksum verification passed."
} else {
    Write-Error "Checksum verification failed. Local: $localChecksum, Remote: $remoteChecksum"
}

4. 批量下载和验证

如果需要批量下载多个 Artifact，可以扩展脚本：

# Artifact URLs
$artifacts = @(
    "https://nexus.example.com/repository/maven-releases/com/example/artifact1/1.0.0/artifact1-1.0.0.jar",
    "https://nexus.example.com/repository/maven-releases/com/example/artifact2/1.0.0/artifact2-1.0.0.jar"
)

$outputPath = "C:\downloads"

foreach ($artifactUrl in $artifacts) {
    $fileName = [System.IO.Path]::GetFileName($artifactUrl)
    $filePath = Join-Path $outputPath $fileName
    $checksumUrl = "$artifactUrl.sha1"
    $checksumPath = "$filePath.sha1"

    # Download artifact and checksum
    Invoke-WebRequest -Uri $artifactUrl -OutFile $filePath
    Invoke-WebRequest -Uri $checksumUrl -OutFile $checksumPath

    # Compute and verify checksum
    $localChecksum = (Get-FileHash -Algorithm SHA1 -Path $filePath).Hash.ToLower()
    $remoteChecksum = Get-Content $checksumPath | ForEach-Object { $_.Trim() }

    if ($localChecksum -eq $remoteChecksum) {
        Write-Host "Checksum verification passed for $fileName."
    } else {
        Write-Error "Checksum verification failed for $fileName. Local: $localChecksum, Remote: $remoteChecksum"
    }
}

5. Nexus 自带功能

Nexus 提供了一些内置功能：

    在 Nexus 用户界面直接下载 .jar 和校验文件（如 .sha1）。
    Nexus 本身支持自动校验和验证上传的文件完整性。

注意事项

    校验和类型:
        校验文件通常有 .md5 和 .sha1 两种，建议优先使用 SHA1。
        如果没有校验文件，可以联系发布者获取。

    网络安全:
        确保 HTTPS 连接安全，防止下载的文件被篡改。

    自动化工具:
        可以通过 CI/CD 工具（如 Azure Pipelines、Jenkins）来整合 Artifact 下载和验证步骤。

通过以上方法，可以确保下载的 Maven Artifact 文件完整性和安全性。
You said:
通过artifactId 和版本号作为参数下载和校验完整性
ChatGPT said:
ChatGPT

下面是通过 Artifact ID 和版本号作为参数下载 Maven Artifact 并校验完整性的完整实现，适用于 PowerShell 脚本。
PowerShell 脚本

# Function to download Maven artifact and verify checksum
function Download-And-VerifyArtifact {
    param (
        [string]$artifactId,         # Artifact ID
        [string]$groupId,           # Group ID
        [string]$version,           # Version number
        [string]$repoUrl,           # Maven Repository URL
        [string]$outputPath         # Local output directory
    )

    # Replace dots in Group ID with slashes for URL structure
    $groupPath = $groupId -replace '\.', '/'

    # Construct artifact URLs
    $artifactFileName = "$artifactId-$version.jar"
    $artifactUrl = "$repoUrl/$groupPath/$artifactId/$version/$artifactFileName"
    $checksumUrl = "$artifactUrl.sha1"

    # Local file paths
    $artifactFilePath = Join-Path $outputPath $artifactFileName
    $checksumFilePath = "$artifactFilePath.sha1"

    # Ensure output directory exists
    if (!(Test-Path $outputPath)) {
        New-Item -ItemType Directory -Path $outputPath
    }

    # Download artifact and checksum
    Write-Host "Downloading artifact: $artifactUrl"
    Invoke-WebRequest -Uri $artifactUrl -OutFile $artifactFilePath
    Write-Host "Downloading checksum: $checksumUrl"
    Invoke-WebRequest -Uri $checksumUrl -OutFile $checksumFilePath

    # Compute local checksum
    $localChecksum = (Get-FileHash -Algorithm SHA1 -Path $artifactFilePath).Hash.ToLower()

    # Read remote checksum
    $remoteChecksum = Get-Content $checksumFilePath | ForEach-Object { $_.Trim() }

    # Compare checksums
    if ($localChecksum -eq $remoteChecksum) {
        Write-Host "Checksum verification passed for $artifactId-$version."
    } else {
        Write-Error "Checksum verification failed for $artifactId-$version."
        Write-Error "Local: $localChecksum"
        Write-Error "Remote: $remoteChecksum"
        Exit 1
    }
}

# Example usage
$artifactId = "my-artifact"
$groupId = "com.example"
$version = "1.0.0"
$repoUrl = "https://nexus.example.com/repository/maven-releases"
$outputPath = "C:\downloads"

Download-And-VerifyArtifact -artifactId $artifactId -groupId $groupId -version $version -repoUrl $repoUrl -outputPath $outputPath

脚本说明

    输入参数
        artifactId: Artifact ID，Maven 项目的标识符。
        groupId: Group ID，项目的组织唯一标识符，com.example 形式。
        version: Artifact 的版本号。
        repoUrl: Maven Repository URL，仓库的基础地址。
        outputPath: 下载的目标目录。

    URL 构建
        使用 Maven 规范，将 groupId 中的点替换为斜杠，构建目标 Artifact 的下载 URL。

    校验完整性
        下载 .jar 文件和 .sha1 校验文件。
        使用 Get-FileHash 计算本地文件的 SHA1 值，并与 .sha1 文件中的值进行比较。

    错误处理
        如果校验和不匹配，脚本会输出详细的错误信息，并退出当前进程。

执行结果

当您运行脚本时，会输出以下信息：

    下载的 Artifact 和校验文件路径。
    校验成功或失败的结果。
    如果校验失败，脚本退出并提供详细的错误信息。

扩展功能

    支持多种校验类型: 可以扩展支持 .md5、.sha256 等校验方式。
    批量下载和验证: 将 Artifact 信息保存到配置文件（如 .csv 或 .json），通过循环实现批量处理。
    自动重试: 增加失败重试机制，防止网络抖动导致的下载失败。

通过这个脚本，您可以动态输入 Maven Artifact 的关键信息，自动下载和验证文件完整性，确保 Artifact 安全可靠。
You said:
在snapshot 版本有很多 版本号加上日期的url   如何通过artifactId 和版本号下载这种artifact
ChatGPT said:
ChatGPT

在 Maven 仓库中，SNAPSHOT 版本会生成许多版本号带时间戳的文件（例如 1.0.0-20241120.123456-1）。要通过 artifactId 和版本号（如 1.0.0-SNAPSHOT）下载最新的 Snapshot Artifact，需要先访问 Maven 仓库的 maven-metadata.xml 文件获取最新的实际构建版本号。

下面是一个完整的 PowerShell 脚本，动态获取最新的 Snapshot Artifact 并下载：
PowerShell 脚本

function Download-SnapshotArtifact {
    param (
        [string]$artifactId,         # Artifact ID
        [string]$groupId,           # Group ID
        [string]$version,           # Version (e.g., 1.0.0-SNAPSHOT)
        [string]$repoUrl,           # Maven Repository URL
        [string]$outputPath         # Local output directory
    )

    # Replace dots in Group ID with slashes for URL structure
    $groupPath = $groupId -replace '\.', '/'

    # Maven metadata URL
    $metadataUrl = "$repoUrl/$groupPath/$artifactId/$version/maven-metadata.xml"

    # Download metadata
    Write-Host "Fetching maven-metadata.xml from: $metadataUrl"
    $metadataFile = Join-Path $outputPath "maven-metadata.xml"
    Invoke-WebRequest -Uri $metadataUrl -OutFile $metadataFile

    # Parse metadata to get the latest timestamp and build number
    $xml = [xml](Get-Content $metadataFile)
    $timestamp = $xml.metadata.versioning.snapshot.timestamp
    $buildNumber = $xml.metadata.versioning.snapshot.buildNumber
    $latestVersion = "$version-$timestamp-$buildNumber"

    Write-Host "Resolved latest snapshot version: $latestVersion"

    # Construct artifact URLs
    $artifactFileName = "$artifactId-$latestVersion.jar"
    $artifactUrl = "$repoUrl/$groupPath/$artifactId/$version/$artifactFileName"
    $checksumUrl = "$artifactUrl.sha1"

    # Local file paths
    $artifactFilePath = Join-Path $outputPath $artifactFileName
    $checksumFilePath = "$artifactFilePath.sha1"

    # Ensure output directory exists
    if (!(Test-Path $outputPath)) {
        New-Item -ItemType Directory -Path $outputPath
    }

    # Download artifact and checksum
    Write-Host "Downloading artifact: $artifactUrl"
    Invoke-WebRequest -Uri $artifactUrl -OutFile $artifactFilePath
    Write-Host "Downloading checksum: $checksumUrl"
    Invoke-WebRequest -Uri $checksumUrl -OutFile $checksumFilePath

    # Compute local checksum
    $localChecksum = (Get-FileHash -Algorithm SHA1 -Path $artifactFilePath).Hash.ToLower()

    # Read remote checksum
    $remoteChecksum = Get-Content $checksumFilePath | ForEach-Object { $_.Trim() }

    # Compare checksums
    if ($localChecksum -eq $remoteChecksum) {
        Write-Host "Checksum verification passed for $artifactId-$latestVersion."
    } else {
        Write-Error "Checksum verification failed for $artifactId-$latestVersion."
        Write-Error "Local: $localChecksum"
        Write-Error "Remote: $remoteChecksum"
        Exit 1
    }
}

# Example usage
$artifactId = "my-artifact"
$groupId = "com.example"
$version = "1.0.0-SNAPSHOT"
$repoUrl = "https://nexus.example.com/repository/maven-snapshots"
$outputPath = "C:\downloads"

Download-SnapshotArtifact -artifactId $artifactId -groupId $groupId -version $version -repoUrl $repoUrl -outputPath $outputPath

脚本解析

    maven-metadata.xml 获取最新版本
        通过 maven-metadata.xml 文件，解析最新的时间戳和构建号。
        例如：解析出 20241120.123456 和 1，则最新版本为 1.0.0-20241120.123456-1。

    URL 构建
        使用最新版本号拼接出实际 Artifact 和校验文件的 URL。

    校验完整性
        下载 .jar 和 .sha1 文件。
        比较本地计算的 SHA1 和远程校验值。

扩展功能

    支持动态版本选择：可以修改脚本从 maven-metadata.xml 获取历史版本而不是最新版本。
    批量处理：通过循环调用函数下载多个 Artifact。
    错误处理：增加网络错误重试机制，避免因偶发网络问题导致失败。

Maven 仓库结构

假设 groupId=com.example，artifactId=my-artifact，version=1.0.0-SNAPSHOT，Maven 仓库目录结构如下：

https://nexus.example.com/repository/maven-snapshots/com/example/my-artifact/1.0.0-SNAPSHOT/
  - maven-metadata.xml
  - my-artifact-1.0.0-20241120.123456-1.jar
  - my-artifact-1.0.0-20241120.123456-1.jar.sha1
  - ...

输出示例

运行脚本时，输出类似以下信息：

Fetching maven-metadata.xml from: https://nexus.example.com/repository/maven-snapshots/com/example/my-artifact/1.0.0-SNAPSHOT/maven-metadata.xml
Resolved latest snapshot version: 1.0.0-20241120.123456-1
Downloading artifact: https://nexus.example.com/repository/maven-snapshots/com/example/my-artifact/1.0.0-SNAPSHOT/my-artifact-1.0.0-20241120.123456-1.jar
Downloading checksum: https://nexus.example.com/repository/maven-snapshots/com/example/my-artifact/1.0.0-SNAPSHOT/my-artifact-1.0.0-20241120.123456-1.jar.sha1
Checksum verification passed for my-artifact-1.0.0-20241120.123456-1.

通过这种方式可以确保下载到正确的最新 Snapshot Artifact，并验证其完整性。