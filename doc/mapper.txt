要使用 @Mapper 注解来实现大数据量的表数据导出功能，可以遵循以下步骤：
1. 配置 @Mapper 注解的 MyBatis 映射器

首先，创建一个使用 @Mapper 注解的接口来定义查询方法。这种方式避免了 XML 映射文件的复杂性，使代码更简洁。

java

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.session.RowBounds;

import java.util.List;
import java.util.Map;

@Mapper
public interface DataMapper {

    @Select("SELECT * FROM ${tableName}")
    List<Map<String, Object>> selectAll(@Param("tableName") String tableName, RowBounds rowBounds);
}

2. 编写服务类来处理数据导出

然后，在服务类中调用 DataMapper 的方法，通过分批处理的方式读取数据并写入文件。

java

import cn.hutool.core.io.FileUtil;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.RowBounds;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;

@Service
public class DataExportService {

    @Autowired
    private SqlSessionFactory sqlSessionFactory;

    @Autowired
    private DataMapper dataMapper;

    private static final int BATCH_SIZE = 10000; // 每批次处理的数据量

    public void exportData(String tableName, String filePath) {
        File file = FileUtil.file(filePath);

        try (BufferedWriter writer = FileUtil.getWriter(file, "UTF-8", true)) {
            int offset = 0;

            while (true) {
                RowBounds rowBounds = new RowBounds(offset, BATCH_SIZE);
                List<Map<String, Object>> results = dataMapper.selectAll(tableName, rowBounds);

                if (results.isEmpty()) {
                    break; // 如果没有更多数据，结束循环
                }

                writeToFile(writer, results);
                offset += BATCH_SIZE;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void writeToFile(BufferedWriter writer, List<Map<String, Object>> results) throws IOException {
        for (Map<String, Object> row : results) {
            String line = String.join(",", row.values().stream()
                    .map(value -> value == null ? "" : value.toString())
                    .toArray(String[]::new));
            writer.write(line);
            writer.newLine();
        }
        writer.flush(); // 定期刷新缓冲区
    }
}

3. 配置 MyBatis 和 Spring Boot

确保你的 Spring Boot 项目配置了 MyBatis，并且自动扫描 @Mapper 接口。你可以在主类或配置类中启用 @MapperScan 注解。

java

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan("com.example.mapper") // 这里指定你的 Mapper 接口包
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}

4. 运行导出任务

现在你可以运行 DataExportService 的 exportData 方法，将大数据量的表导出到文件中。

java

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class ExportRunner implements CommandLineRunner {

    @Autowired
    private DataExportService dataExportService;

    @Override
    public void run(String... args) throws Exception {
        dataExportService.exportData("your_table_name", "output.csv");
    }
}

总结

使用 @Mapper 注解和 MyBatis 的 RowBounds 分页功能，可以有效地处理大数据量的导出任务。结合 Hutool 简化文件操作，可以确保处理过程高效、稳定，适用于大型数据集的批量处理和文件生成场景。
You said:
ExportRunner  怎么调用
ChatGPT said:
ChatGPT

要调用 ExportRunner 并触发数据导出操作，你可以将其作为 Spring Boot 应用程序的一部分来运行。ExportRunner 实现了 CommandLineRunner 接口，这意味着它会在 Spring Boot 应用程序启动后自动执行。
1. 启动 Spring Boot 应用时自动调用

ExportRunner 会在 Spring Boot 应用程序启动后自动调用，不需要手动触发。你只需启动应用程序即可运行数据导出逻辑。

假设 ExportRunner 类已经配置好，并且你的 Spring Boot 应用程序是通过 SpringApplication.run() 启动的：

java

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}

2. 启动时的日志输出

当你启动应用程序时，ExportRunner 中的 run 方法会自动执行。你可以在控制台看到相关的日志输出，表示数据导出操作已经开始。如果你在 run 方法中打印了任何日志信息，也会在控制台显示。
3. 调试和开发阶段的手动调用

如果你希望在开发和调试阶段手动触发 ExportRunner，你可以直接在测试类或 main 方法中创建并调用 ExportRunner。

例如，在测试类中：

java

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class ExportRunnerTest {

    @Autowired
    private ExportRunner exportRunner;

    @Test
    public void testExport() throws Exception {
        exportRunner.run();
    }
}

4. 使用不同的参数调用

如果需要在不同的情况下使用不同的参数来调用 ExportRunner，你可以在 run 方法中根据传入的参数进行处理：

java

@Override
public void run(String... args) throws Exception {
    if (args.length > 0) {
        String tableName = args[0];
        String filePath = args.length > 1 ? args[1] : "output.csv";
        dataExportService.exportData(tableName, filePath);
    } else {
        // 使用默认值或抛出异常
        throw new IllegalArgumentException("Table name is required");
    }
}

启动应用时，你可以通过命令行传递参数：

bash

java -jar your-app.jar your_table_name output.csv

总结

ExportRunner 在 Spring Boot 应用启动后会自动调用。如果你想要手动触发或者在测试环境中调用，可以在测试类中注入并调用 ExportRunner，或者通过参数化启动来实现不同的行为。