
让我解释一下 bc-replay 的 YML 文件和 Playwright 测试脚本的区别和转换过程：
文件格式区别：
example.record.yml

# BC-Replay 录制文件
name: "测试用例名称"
steps:
  - type: "navigate"
    url: "http://localhost:8080/bc250/"

  - type: "click"
    selector: "#button1"

  - type: "fill"
    selector: "#input1"
    value: "测试数据"

  - type: "expect"
    selector: ".result"
    assertion: "toHaveText"
    value: "期望结果"



// Playwright 测试脚本
example.spec.ts

import { test, expect } from '@playwright/test';

test('测试用例名称', async ({ page }) => {
  await page.goto('http://localhost:8080/bc250/');

  await page.click('#button1');

  await page.fill('#input1', '测试数据');

  await expect(page.locator('.result')).toHaveText('期望结果');
});



2. 转换过程：
bc-replay 内部会将 YML 文件转换为 Playwright 测试脚本，大致实现过程如下：

record-to-playwright.ts


interface Step {
  type: string;
  selector?: string;
  value?: string;
  assertion?: string;
}

class RecordingConverter {
  private generatePlaywrightTest(recording: any): string {
    const steps = recording.steps;
    let testCode = `
import { test, expect } from '@playwright/test';

test('${recording.name}', async ({ page }) => {
`;

    for (const step of steps) {
      testCode += this.convertStep(step);
    }

    testCode += '});';
    return testCode;
  }

  private convertStep(step: Step): string {
    switch (step.type) {
      case 'navigate':
        return `  await page.goto('${step.url}');\n`;

      case 'click':
        return `  await page.click('${step.selector}');\n`;

      case 'fill':
        return `  await page.fill('${step.selector}', '${step.value}');\n`;

      case 'expect':
        return `  await expect(page.locator('${step.selector}')).${step.assertion}('${step.value}');\n`;

      // 处理其他类型的步骤...
    }
  }
}


主要区别：
结构差异：

# YML 格式 - 声明式
steps:
  - type: "action"
    params: "value"

// Playwright - 命令式
await page.action('params');



功能扩展：

# BC-Replay 特有功能
steps:
  - type: "businessCentralLogin"  # BC 特定操作
    username: "${ENV_USERNAME}"
    password: "${ENV_PASSWORD}"

  - type: "waitForBC"  # BC 特定等待
    timeout: 5000

转换流程：

graph LR
    A[YML Recording] --> B[解析 YML]
    B --> C[转换步骤]
    C --> D[生成 Playwright 代码]
    D --> E[执行测试]


执行过程：
player.ts

class TestPlayer {
  async playRecording(recording: string) {
    // 1. 读取 YML 文件
    const yml = await fs.readFile(recording, 'utf8');
    const testCase = yaml.parse(yml);

    // 2. 转换为 Playwright 测试
    const converter = new RecordingConverter();
    const playwrightTest = converter.convert(testCase);

    // 3. 动态执行测试
    await this.executeTest(playwrightTest);
  }

  private async executeTest(testCode: string) {
    // 使用 Playwright Test Runner 执行测试
    const testFile = await this.createTempTestFile(testCode);
    await playwright.runTest(testFile);
  }
}



主要优势：
YML 格式更易读易写
可以添加业务相关的自定义操作
支持环境变量和参数化
更容易进行版本控制和比较差异
可以自动生成测试文档
例如，一个完整的 BC-Replay 测试用例：

bc-test.yml

name: "创建新客户"
description: "测试创建新客户的功能"
variables:
  customerName: "测试客户 ${TIMESTAMP}"

steps:
  - type: "bcLogin"
    username: "${BC_USERNAME}"
    password: "${BC_PASSWORD}"

  - type: "navigate"
    url: "${BC_URL}/customers"

  - type: "click"
    selector: "[data-testid='new-customer-btn']"

  - type: "fill"
    selector: "#CustomerName"
    value: "${customerName}"

  - type: "click"
    selector: "#SaveButton"

  - type: "expect"
    selector: ".notification"
    assertion: "toHaveText"
    value: "客户创建成功"

  - type: "bcLogout"

  这个 YML 文件会被转换为相应的 Playwright 测试代码并执行。转换过程会处理变量替换、特殊命令和断言等。



  #-----------------------------------------------------------------------------------
  我来解释如何在 bc-replay 中实现参数化测试脚本。以下是几种实现方式：
  在 YML 文件中定义参数：
  test-with-params.yml

  name: "参数化测试用例"
  parameters:
    customerName: "默认客户名"
    customerType: "default"
    amount: 100

  variables:
    timestamp: "${NOW:yyyy-MM-dd}"

  steps:
    - type: "navigate"
      url: "${START_URL}/customers"

    - type: "click"
      selector: "#newCustomer"

    - type: "fill"
      selector: "#name"
      value: "${parameters.customerName}-${variables.timestamp}"

    - type: "select"
      selector: "#type"
      value: "${parameters.customerType}"

    - type: "fill"
      selector: "#amount"
      value: "${parameters.amount}"


 在运行时传递参数：
 run-test.ps1

 npx replay .\test-with-params.yml --params `
   customerName="测试客户" `
   customerType="VIP" `
   amount=200

 使用参数文件：
 test-params.yml

 # 参数配置文件
 default:
   customerName: "默认客户"
   customerType: "normal"
   amount: 100

 test:
   customerName: "测试客户"
   customerType: "test"
   amount: 50

 production:
   customerName: "正式客户"
   customerType: "vip"
   amount: 1000

数据驱动测试：
data-drive-test.yml

name: "数据驱动测试"
dataSource: "./test-data.csv"
iterations:
  - data: ${row}
    steps:
      - type: "fill"
        selector: "#name"
        value: "${data.name}"

      - type: "select"
        selector: "#type"
        value: "${data.type}"

      - type: "fill"
        selector: "#amount"
        value: "${data.amount}"
在 Pipeline 中使用参数：
azure.pipeline.yml

parameters:
  - name: environment
    type: string
    default: test
    values:
      - test
      - production

  - name: customerType
    type: string
    default: normal

steps:
- task: PowerShell@2
  inputs:
    targetType: 'filePath'
    filePath: 'run-bc-replay.ps1'
    arguments: >
      -Recording ".\test-with-params.yml"
      -StartAddress "$(BC_URL)"
      -Params @{
        environment='${{ parameters.environment }}';
        customerType='${{ parameters.customerType }}'
      }

实现参数处理的核心代码：
parameter-processor.ts

interface TestParameters {
  [key: string]: any;
}

class ParameterProcessor {
  private parameters: TestParameters;
  private variables: Record<string, string>;

  constructor(parameters: TestParameters) {
    this.parameters = parameters;
    this.variables = this.initializeVariables();
  }

  private initializeVariables(): Record<string, string> {
    return {
      'NOW': new Date().toISOString(),
      'TIMESTAMP': Date.now().toString(),
      // ... 其他内置变量
    };
  }

  public processValue(value: string): string {
    return value.replace(/\${([^}]+)}/g, (match, key) => {
      if (key.startsWith('parameters.')) {
        const paramKey = key.replace('parameters.', '');
        return this.parameters[paramKey]?.toString() || match;
      }

      if (key.startsWith('variables.')) {
        const varKey = key.replace('variables.', '');
        return this.variables[varKey]?.toString() || match;
      }

      if (key.includes(':')) {
        const [varName, format] = key.split(':');
        if (varName === 'NOW') {
          return this.formatDate(new Date(), format);
        }
      }

      return match;
    });
  }

  private formatDate(date: Date, format: string): string {
    // 实现日期格式化逻辑
    return format.replace('yyyy', date.getFullYear().toString())
                .replace('MM', (date.getMonth() + 1).toString().padStart(2, '0'))
                .replace('dd', date.getDate().toString().padStart(2, '0'));
  }

  public processStep(step: any): any {
    if (typeof step === 'object') {
      const processed: any = {};
      for (const [key, value] of Object.entries(step)) {
        if (typeof value === 'string') {
          processed[key] = this.processValue(value);
        } else if (Array.isArray(value)) {
          processed[key] = value.map(item => this.processStep(item));
        } else if (typeof value === 'object') {
          processed[key] = this.processStep(value);
        } else {
          processed[key] = value;
        }
      }
      return processed;
    }
    return step;
  }
}

使用示例：
test-runner.ts

async function runTest(recording: string, parameters: TestParameters) {
  // 1. 加载测试脚本
  const testScript = await loadYamlFile(recording);

  // 2. 处理参数
  const processor = new ParameterProcessor(parameters);
  const processedScript = processor.processStep(testScript);

  // 3. 执行测试
  for (const step of processedScript.steps) {
    await executeStep(step);
  }
}

// 使用示例
await runTest('test-with-params.yml', {
  customerName: '测试客户',
  customerType: 'VIP',
  amount: 200
});


这样的参数化实现可以：
支持默认值
支持环境变量
支持日期/时间格式化
支持数据驱动测试
支持多环境配置
与 CI/CD 集成
支持复杂的参数处理逻辑
记得在文档中说明参数的使用方法和支持的格式。


Parameterize scripts (YAML editing only)
Add parameters(variables) to scriptsExample:Customer List-No.=10000
Use parameters in steps as a valueAdded to a Parameters collection in YAMLExample: value := Parameters.Customer List-No.
descriptionTest recordingparametersCustomer List - No.
type: stringdefault:"10000"
steps :
type: inputtarget :
page:Customer listscope:filterfield:Novalue:=Parameters,'customer List - No."
僾摻贼5:33 /34:05
Can also be used in expressions in the