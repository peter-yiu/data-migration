// Business Central 逻辑处理指南

// 1. 条件判断
local procedure ConditionExamples()
var
    Customer: Record Customer;
    Amount: Decimal;
    Status: Option New,Processing,Completed;
begin
    // 1.1 基础条件判断
    if Amount > 1000 then begin
        // 单条件处理
    end else begin
        // 其他情况处理
    end;
    
    // 1.2 多重条件判断
    if (Amount > 1000) and (Customer.Blocked = Customer.Blocked::" ") then begin
        // 满足所有条件
    end else if (Amount <= 0) or (Status = Status::New) then begin
        // 满足任一条件
    end;
    
    // 1.3 嵌套条件
    if Customer.FindSet() then begin
        if Customer."Credit Limit" > 0 then begin
            if Customer.Balance > Customer."Credit Limit" then
                Error('超出信用额度');
        end;
    end;
    
    // 1.4 使用 case 语句
    case Status of
        Status::New:
            ProcessNewStatus();
        Status::Processing:
            ProcessInProgress();
        Status::Completed:
            ProcessCompleted();
        else
            Error('未知状态');
    end;
    
    // 1.5 条件表达式
    Amount := if (Status = Status::Completed) then 100 else 0;
end;

// 2. 循环处理
local procedure LoopExamples()
var
    SalesLine: Record "Sales Line";
    Counter: Integer;
    Window: Dialog;
begin
    // 2.1 基础记录循环
    if SalesLine.FindSet() then begin
        repeat
            ProcessSalesLine(SalesLine);
        until SalesLine.Next() = 0;
    end;
    
    // 2.2 带进度显示的循环
    Window.Open('处理中 #1### / #2###');
    if SalesLine.FindSet() then begin
        Window.Update(2, SalesLine.Count);
        repeat
            Counter += 1;
            Window.Update(1, Counter);
            ProcessSalesLine(SalesLine);
        until SalesLine.Next() = 0;
    end;
    Window.Close();
    
    // 2.3 For 循环
    for Counter := 1 to 100 do begin
        if Counter mod 10 = 0 then  // 每10次处理一次
            DoSpecialProcess();
    end;
    
    // 2.4 While 循环
    while (Counter > 0) and HasMoreToProcess() do begin
        ProcessNext();
        Counter -= 1;
    end;
    
    // 2.5 带条件中断的循环
    if SalesLine.FindSet() then
        repeat
            if not ProcessSalesLine(SalesLine) then
                break;  // 遇到错误时中断
        until SalesLine.Next() = 0;
end;

// 3. 错误处理和验证
local procedure ErrorHandlingExamples()
var
    IsHandled: Boolean;
begin
    // 3.1 基础错误处理
    if not Validate() then
        Error('验证失败');
        
    // 3.2 使用 IsHandled 模式
    OnBeforeValidate(IsHandled);
    if IsHandled then
        exit;
        
    // 3.3 Try-Function 模式
    if not TryValidateDocument() then
        Error(GetLastErrorText());
        
    // 3.4 条件验证
    case true of
        Amount < 0:
            Error('金额不能为负');
        Amount > MaxAmount:
            Error('超出最大金额 %1', MaxAmount);
        not HasPermission:
            Error('权限不足');
    end;
end;

// 4. 数据处理和计算
local procedure DataProcessingExamples()
var
    TempSalesLine: Record "Sales Line" temporary;
    TotalAmount: Decimal;
begin
    // 4.1 数值计算
    TotalAmount := Round(
        UnitPrice * Quantity * (1 - DiscountPercent / 100),
        0.01,
        '='  // 四舍五入
    );
    
    // 4.2 使用临时表处理
    if SalesLine.FindSet() then
        repeat
            if QualifiesForProcessing(SalesLine) then begin
                TempSalesLine := SalesLine;
                TempSalesLine.Insert();
            end;
        until SalesLine.Next() = 0;
        
    // 4.3 批量更新
    SalesLine.SetRange("Document Type", DocType);
    SalesLine.ModifyAll(Status, NewStatus, true);  // true = 启用事务
end;

// 5. 字符串处理
local procedure StringProcessingExamples()
var
    Text: Text;
    Position: Integer;
begin
    // 5.1 字符串操作
    Text := CopyStr(SourceText, 1, 10);  // 截取字符串
    Text := PadStr(Text, 20);            // 补齐长度
    Text := DelChr(Text, '<>', ' ');     // 删除空格
    
    // 5.2 字符串查找
    Position := StrPos(Text, SearchStr);
    if Position > 0 then
        ProcessFound();
        
    // 5.3 字符串替换
    Text := StrSubstNo(
        '单据 %1 已处理，金额: %2',
        DocumentNo,
        Format(Amount, 0, '<Precision,2:2><Standard Format,0>')
    );
end;

// 6. 日期时间处理
local procedure DateTimeExamples()
var
    StartDate: Date;
    EndDate: Date;
begin
    // 6.1 日期计算
    StartDate := CalcDate('<-CM>', WorkDate());  // 本月初
    EndDate := CalcDate('<CM>', WorkDate());     // 本月末
    
    // 6.2 日期比较
    if (PostingDate >= StartDate) and (PostingDate <= EndDate) then
        ProcessInPeriod();
        
    // 6.3 日期格式化
    Text := Format(WorkDate(), 0, '<Year4>-<Month,2>-<Day,2>');
end;

// 7. 性能优化技巧
local procedure PerformanceOptimizationExamples()
begin
    // 7.1 使用 FindSet 和 Next
    if Record.FindSet(true, true) then begin  // true = 锁定, true = 按键排序
        repeat
            // 处理记录
        until Record.Next() = 0;
    end;
    
    // 7.2 使用 SetAutoCalcFields
    Record.SetAutoCalcFields(false);  // 禁用自动计算字段
    
    // 7.3 使用 SetLoadFields
    Record.SetLoadFields("No.", Amount, Status);  // 只加载需要的字段
end;

// 8. 事件订阅示例
[EventSubscriber(ObjectType::Codeunit, Codeunit::"Sales-Post", 'OnBeforePostSalesDoc', '', false, false)]
local procedure OnBeforePostSalesDoc(var SalesHeader: Record "Sales Header"; var IsHandled: Boolean)
begin
    if SalesHeader."Document Type" <> SalesHeader."Document Type"::Order then
        exit;
        
    // 自定义处理逻辑
    CustomProcessing(SalesHeader);
end;

// 9. 辅助函数
local procedure QualifiesForProcessing(SalesLine: Record "Sales Line"): Boolean
begin
    exit(
        (SalesLine.Type = SalesLine.Type::Item) and
        (SalesLine.Quantity > 0) and
        (not SalesLine.IsEmpty)
    );
end;

local procedure ProcessSalesLine(var SalesLine: Record "Sales Line"): Boolean
begin
    // 处理逻辑
    exit(true);
end;

local procedure HasMoreToProcess(): Boolean
begin
    // 检查是否还有更多需要处理
    exit(true);
end;

// 10. 常见注意事项
/*
1. 始终使用事务处理保证数据一致性
2. 大量数据处理时要考虑性能影响
3. 适当使用进度显示提供用户反馈
4. 做好错误处理和日志记录
5. 考虑并发访问的情况
6. 注意代码可维护性
7. 遵循命名规范
8. 添加适当的注释
*/
