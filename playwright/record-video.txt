// ... existing code ...

        // 设置录制参数
        const ffmpegArgs = [
            '-f', 'gdigrab',
            '-framerate', framerate.toString(),
            '-i', 'title=Chromium', // 修改这里，通过窗口标题来捕获特定窗口
            '-c:v', 'libx264',
            '-preset', 'ultrafast',
            '-crf', quality.toString(),
            videoPath
        ];

// ... existing code ...


ffmpeg -f gdigrab -i title=dummy -list_devices true -f dshow -i dummy


. Playwright 的内置视频录制功能 (实验性/高层 API)

    方案概述： Playwright 实际上提供了自己的视频录制功能，通常通过 browser.newContext({ recordVideo: { dir: 'videos/' } }) 或 page.startRecording() (实验性) 来实现。它会在后台捕获页面内容并生成视频。

. Playwright 的内置视频录制功能 (实验性/高层 API)

    方案概述： Playwright 实际上提供了自己的视频录制功能，通常通过 browser.newContext({ recordVideo: { dir: 'videos/' } }) 或 page.startRecording() (实验性) 来实现。它会在后台捕获页面内容并生成视频。
    适用场景：
        自动化测试中的录屏： 记录测试过程，方便调试和回放。
        简单的操作回放： 快速生成一个页面操作的视频。
    优缺点：
        优点： 最简单、集成度最高的方案，Playwright 内部处理了帧捕获和编码，无需手动管理 FFmpeg。
        缺点：
            有限的自定义性： 缺乏对编码参数、音频输入（无法直接从麦克风录制）、实时字幕等高级功能的精细控制。
            音频集成： 默认情况下不录制麦克风音频，可能只能录制页面内部的音频。
            字幕添加： 无法在录制时实时添加终端输入的字幕，可能需要后期处理。

// ... existing code ...

        // 导航到目标网站
        spinner.text = '加载页面...';
        await page.goto(url);

        spinner.succeed('录制已开始');
        console.log(chalk.green('\n正在录制浏览器窗口...'));
        console.log(chalk.yellow('按 ESC 键停止录制\n'));

        // 添加 ESC 键监听
        await page.evaluate(() => {
            window.addEventListener('keydown', (event) => {
                if (event.key === 'Escape') {
                    window._stopRecording = true;
                }
            });
        });

        // 等待用户停止
        await new Promise((resolve) => {
            let isClosing = false;

            const cleanup = async () => {
                if (isClosing) return;
                isClosing = true;
                // ... existing cleanup code ...
            };

            // 定期检查是否按下了 ESC 键
            const checkInterval = setInterval(async () => {
                const shouldStop = await page.evaluate(() => window._stopRecording);
                if (shouldStop) {
                    clearInterval(checkInterval);
                    await cleanup();
                }
            }, 100);

            // 保留原有的中断信号监听
            process.on('SIGINT', cleanup);
            process.on('SIGTERM', cleanup);
        });

// ... existing code ...



npm install commander